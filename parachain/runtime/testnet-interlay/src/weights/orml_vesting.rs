
//! Autogenerated weights for orml_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-03, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `interlay-hetzner-01`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-testnet-latest"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --chain
// kintsugi-testnet-latest
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// orml_vesting
// --extrinsic
// *
// --steps
// 100
// --repeat
// 10
// --output
// orml_vesting_weights.rs
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for orml_vesting using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> orml_vesting::WeightInfo for WeightInfo<T> {

	/// Storage: Vesting VestingSchedules (r:1 w:1)
	/// Proof: Vesting VestingSchedules (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 1]`.
	fn claim	(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1711 + n * (66 Â±0)`
		//  Estimated: `11488`
		// Minimum execution time: 71_704_000 picoseconds.
		Weight::from_parts(87_352_830, 11488)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Vesting VestingSchedules (r:1 w:1)
	/// Proof: Vesting VestingSchedules (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	fn vested_transfer	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2149`
		//  Estimated: `14078`
		// Minimum execution time: 132_846_000 picoseconds.
		Weight::from_parts(133_958_000, 14078)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Vesting VestingSchedules (r:0 w:1)
	/// Proof: Vesting VestingSchedules (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 1]`.
	fn update_vesting_schedules	(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2006`
		//  Estimated: `8936`
		// Minimum execution time: 74_298_000 picoseconds.
		Weight::from_parts(80_576_431, 8936)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}
