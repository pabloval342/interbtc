
//! Autogenerated weights for farming
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-13, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sander-dell`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("interlay-testnet-latest"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// interlay-testnet-latest
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// parachain/runtime/testnet-interlay/src/weights/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for farming using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> farming::WeightInfo for WeightInfo<T> {
	/// Storage: Farming RewardSchedules (r:5 w:0)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:2 w:0)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 4]`.
	fn on_initialize(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1181 + c * (41 ±0)`
		//  Estimated: `5476 + c * (3773 ±0)`
		// Minimum execution time: 25_302_000 picoseconds.
		Weight::from_parts(28_992_241, 5476)
			// Standard Error: 222_568
			.saturating_add(Weight::from_parts(4_770_758, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3773).saturating_mul(c.into()))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:1 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn update_reward_schedule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2038`
		//  Estimated: `10332`
		// Minimum execution time: 64_785_000 picoseconds.
		Weight::from_parts(66_982_000, 10332)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:0 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn remove_reward_schedule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2216`
		//  Estimated: `7783`
		// Minimum execution time: 52_238_000 picoseconds.
		Weight::from_parts(55_241_000, 7783)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: FarmingRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:4 w:4)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:4 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 4]`.
	fn deposit(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1869 + c * (70 ±0)`
		//  Estimated: `19365 + c * (5300 ±0)`
		// Minimum execution time: 60_557_000 picoseconds.
		Weight::from_parts(58_314_543, 19365)
			// Standard Error: 96_053
			.saturating_add(Weight::from_parts(7_301_401, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 5300).saturating_mul(c.into()))
	}
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: FarmingRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:4 w:4)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:4 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[1, 4]`.
	fn withdraw(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1869 + c * (70 ±0)`
		//  Estimated: `19365 + c * (5300 ±0)`
		// Minimum execution time: 56_545_000 picoseconds.
		Weight::from_parts(54_600_041, 19365)
			// Standard Error: 98_804
			.saturating_add(Weight::from_parts(7_807_403, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 5300).saturating_mul(c.into()))
	}
	/// Storage: FarmingRewards Stake (r:1 w:0)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:1 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:1 w:1)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalRewards (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2768`
		//  Estimated: `28755`
		// Minimum execution time: 85_923_000 picoseconds.
		Weight::from_parts(88_584_000, 28755)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}