
//! Autogenerated weights for dex_stable
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `enterprise`, CPU: `Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("interlay-testnet-latest"), DB CACHE: 1024

// Executed Command:
// ./target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// dex-stable
// --extrinsic
// *
// --chain
// interlay-testnet-latest
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// parachain/runtime/testnet-interlay/src/weights/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for dex_stable using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> dex_stable::WeightInfo for WeightInfo<T> {
	/// Storage: DexStable NextPoolId (r:1 w:1)
	/// Proof: DexStable NextPoolId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DexStable LpCurrencies (r:1 w:1)
	/// Proof: DexStable LpCurrencies (max_values: None, max_size: Some(31), added: 2506, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: DexStable Pools (r:1 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 10]`.
	/// The range of component `s` is `[0, 50]`.
	fn create_base_pool(b: u32, _s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1420`
		//  Estimated: `8899`
		// Minimum execution time: 45_913_000 picoseconds.
		Weight::from_parts(120_234_742, 8899)
			// Standard Error: 806_472
			.saturating_add(Weight::from_parts(6_162_130, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: DexStable LpCurrencies (r:2 w:1)
	/// Proof: DexStable LpCurrencies (max_values: None, max_size: Some(31), added: 2506, mode: MaxEncodedLen)
	/// Storage: DexStable NextPoolId (r:1 w:1)
	/// Proof: DexStable NextPoolId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: DexStable Pools (r:2 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:0)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// The range of component `m` is `[2, 10]`.
	/// The range of component `s` is `[0, 50]`.
	fn create_meta_pool(m: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2789`
		//  Estimated: `17709`
		// Minimum execution time: 86_965_000 picoseconds.
		Weight::from_parts(80_415_233, 17709)
			// Standard Error: 178_219
			.saturating_add(Weight::from_parts(1_097_079, 0).saturating_mul(m.into()))
			// Standard Error: 30_437
			.saturating_add(Weight::from_parts(320_874, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: DexStable Pools (r:1 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:21 w:21)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 10]`.
	fn add_liquidity(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2669 + b * (152 ±0)`
		//  Estimated: `11497 + b * (5180 ±0)`
		// Minimum execution time: 153_229_000 picoseconds.
		Weight::from_parts(191_072_824, 11497)
			// Standard Error: 1_177_509
			.saturating_add(Weight::from_parts(20_790_389, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 5180).saturating_mul(b.into()))
	}
	/// Storage: DexStable Pools (r:1 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3916`
		//  Estimated: `16757`
		// Minimum execution time: 128_744_000 picoseconds.
		Weight::from_parts(129_936_000, 16757)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: DexStable Pools (r:1 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:21 w:21)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 10]`.
	fn remove_liquidity(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2606 + b * (251 ±0)`
		//  Estimated: `10994 + b * (5180 ±0)`
		// Minimum execution time: 116_422_000 picoseconds.
		Weight::from_parts(151_030_983, 10994)
			// Standard Error: 836_165
			.saturating_add(Weight::from_parts(12_571_545, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 5180).saturating_mul(b.into()))
	}
	/// Storage: DexStable Pools (r:1 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_liquidity_one_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3779`
		//  Estimated: `16677`
		// Minimum execution time: 154_241_000 picoseconds.
		Weight::from_parts(155_348_000, 16677)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: DexStable Pools (r:1 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:21 w:21)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 10]`.
	fn remove_liquidity_imbalance(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2648 + b * (251 ±0)`
		//  Estimated: `11497 + b * (5180 ±0)`
		// Minimum execution time: 143_892_000 picoseconds.
		Weight::from_parts(120_539_859, 11497)
			// Standard Error: 331_297
			.saturating_add(Weight::from_parts(23_070_116, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 5180).saturating_mul(b.into()))
	}
	/// Storage: DexStable Pools (r:2 w:2)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:2 w:2)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:41 w:41)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 10]`.
	/// The range of component `m` is `[2, 10]`.
	fn add_pool_and_base_pool_liquidity(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3380 + b * (249 ±0) + m * (139 ±0)`
		//  Estimated: `17298 + b * (5180 ±0) + m * (5180 ±0)`
		// Minimum execution time: 459_046_000 picoseconds.
		Weight::from_parts(140_713_219, 17298)
			// Standard Error: 70_905
			.saturating_add(Weight::from_parts(26_081_763, 0).saturating_mul(b.into()))
			// Standard Error: 70_905
			.saturating_add(Weight::from_parts(32_172_783, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 5180).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 5180).saturating_mul(m.into()))
	}
	/// Storage: DexStable Pools (r:2 w:2)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:41 w:41)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:2 w:2)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `b` is `[2, 10]`.
	/// The range of component `m` is `[2, 10]`.
	fn remove_pool_and_base_pool_liquidity(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3443 + b * (249 ±0) + m * (237 ±0)`
		//  Estimated: `19398 + b * (5180 ±0) + m * (5180 ±0)`
		// Minimum execution time: 367_135_000 picoseconds.
		Weight::from_parts(144_326_774, 19398)
			// Standard Error: 60_558
			.saturating_add(Weight::from_parts(19_100_752, 0).saturating_mul(b.into()))
			// Standard Error: 60_558
			.saturating_add(Weight::from_parts(19_512_739, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 5180).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 5180).saturating_mul(m.into()))
	}
	/// Storage: DexStable Pools (r:2 w:2)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:5 w:5)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:2 w:2)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_pool_and_base_pool_liquidity_one_currency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5794`
		//  Estimated: `30261`
		// Minimum execution time: 255_696_000 picoseconds.
		Weight::from_parts(257_942_000, 30261)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: DexStable Pools (r:2 w:2)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:15 w:6)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn swap_pool_from_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6472`
		//  Estimated: `51048`
		// Minimum execution time: 307_353_000 picoseconds.
		Weight::from_parts(308_022_000, 51048)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: DexStable Pools (r:2 w:2)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:6 w:6)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	fn swap_pool_to_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5988`
		//  Estimated: `30341`
		// Minimum execution time: 243_821_000 picoseconds.
		Weight::from_parts(246_823_000, 30341)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: DexStable Pools (r:1 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn swap_meta_pool_underlying() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4307`
		//  Estimated: `16757`
		// Minimum execution time: 131_141_000 picoseconds.
		Weight::from_parts(132_714_000, 16757)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: DexStable Pools (r:1 w:1)
	/// Proof: DexStable Pools (max_values: None, max_size: Some(816), added: 3291, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:10 w:0)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	fn withdraw_admin_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3309`
		//  Estimated: `29191`
		// Minimum execution time: 126_249_000 picoseconds.
		Weight::from_parts(128_120_000, 29191)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}