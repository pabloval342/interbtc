
//! Autogenerated weights for dex_general
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-14, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `enterprise`, CPU: `Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("interlay-testnet-latest"), DB CACHE: 1024

// Executed Command:
// ./target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// dex-general
// --extrinsic
// *
// --chain
// interlay-testnet-latest
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// parachain/runtime/testnet-interlay/src/weights
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for dex_general using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> dex_general::WeightInfo for WeightInfo<T> {
	/// Storage: DexGeneral FeeMeta (r:1 w:1)
	/// Proof Skipped: DexGeneral FeeMeta (max_values: Some(1), max_size: None, mode: Measured)
	fn set_fee_receiver() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `1282`
		// Minimum execution time: 13_092_000 picoseconds.
		Weight::from_parts(13_599_000, 1282)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DexGeneral FeeMeta (r:1 w:1)
	/// Proof Skipped: DexGeneral FeeMeta (max_values: Some(1), max_size: None, mode: Measured)
	fn set_fee_point() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `1282`
		// Minimum execution time: 12_144_000 picoseconds.
		Weight::from_parts(12_596_000, 1282)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DexGeneral PairStatuses (r:1 w:1)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral LiquidityPairs (r:0 w:1)
	/// Proof Skipped: DexGeneral LiquidityPairs (max_values: None, max_size: None, mode: Measured)
	fn create_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1022`
		//  Estimated: `4519`
		// Minimum execution time: 34_956_000 picoseconds.
		Weight::from_parts(35_684_000, 4519)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DexGeneral PairStatuses (r:1 w:1)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapLimits (r:0 w:1)
	/// Proof Skipped: DexGeneral BootstrapLimits (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapRewards (r:0 w:1)
	/// Proof Skipped: DexGeneral BootstrapRewards (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[1, 10]`.
	/// The range of component `l` is `[1, 10]`.
	fn bootstrap_create(r: u32, l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1022`
		//  Estimated: `5541`
		// Minimum execution time: 35_813_000 picoseconds.
		Weight::from_parts(81_119_616, 5541)
			// Standard Error: 501_240
			.saturating_add(Weight::from_parts(6_901_645, 0).saturating_mul(r.into()))
			// Standard Error: 501_240
			.saturating_add(Weight::from_parts(1_493_990, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DexGeneral BootstrapLimits (r:1 w:0)
	/// Proof Skipped: DexGeneral BootstrapLimits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: DexGeneral PairStatuses (r:1 w:1)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapPersonalSupply (r:1 w:1)
	/// Proof Skipped: DexGeneral BootstrapPersonalSupply (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn bootstrap_contribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2346`
		//  Estimated: `27426`
		// Minimum execution time: 376_610_000 picoseconds.
		Weight::from_parts(381_728_000, 27426)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: DexGeneral PairStatuses (r:1 w:0)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapPersonalSupply (r:1 w:1)
	/// Proof Skipped: DexGeneral BootstrapPersonalSupply (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapEndStatus (r:1 w:0)
	/// Proof Skipped: DexGeneral BootstrapEndStatus (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral LiquidityPairs (r:1 w:0)
	/// Proof Skipped: DexGeneral LiquidityPairs (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: DexGeneral BootstrapRewards (r:1 w:0)
	/// Proof Skipped: DexGeneral BootstrapRewards (max_values: None, max_size: None, mode: Measured)
	fn bootstrap_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3588`
		//  Estimated: `38098`
		// Minimum execution time: 233_464_000 picoseconds.
		Weight::from_parts(235_844_000, 38098)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DexGeneral PairStatuses (r:1 w:1)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:5 w:5)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: DexGeneral LiquidityPairs (r:0 w:1)
	/// Proof Skipped: DexGeneral LiquidityPairs (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapEndStatus (r:0 w:1)
	/// Proof Skipped: DexGeneral BootstrapEndStatus (max_values: None, max_size: None, mode: Measured)
	fn bootstrap_end() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2419`
		//  Estimated: `30398`
		// Minimum execution time: 183_956_000 picoseconds.
		Weight::from_parts(209_405_000, 30398)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: DexGeneral PairStatuses (r:1 w:1)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapRewards (r:1 w:1)
	/// Proof Skipped: DexGeneral BootstrapRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapLimits (r:0 w:1)
	/// Proof Skipped: DexGeneral BootstrapLimits (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[1, 10]`.
	/// The range of component `l` is `[1, 10]`.
	fn bootstrap_update(r: u32, l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1342 + r * (21 ±0)`
		//  Estimated: `8919 + r * (69 ±0) + l * (3 ±0)`
		// Minimum execution time: 43_028_000 picoseconds.
		Weight::from_parts(43_832_000, 8919)
			// Standard Error: 335_093
			.saturating_add(Weight::from_parts(20_683, 0).saturating_mul(r.into()))
			// Standard Error: 335_093
			.saturating_add(Weight::from_parts(7_966_166, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 69).saturating_mul(r.into()))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(l.into()))
	}
	/// Storage: DexGeneral PairStatuses (r:1 w:1)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral BootstrapPersonalSupply (r:1 w:1)
	/// Proof Skipped: DexGeneral BootstrapPersonalSupply (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn bootstrap_refund() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2642`
		//  Estimated: `23197`
		// Minimum execution time: 92_751_000 picoseconds.
		Weight::from_parts(93_308_000, 23197)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: DexGeneral PairStatuses (r:1 w:1)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:5 w:5)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: DexGeneral LiquidityPairs (r:1 w:0)
	/// Proof Skipped: DexGeneral LiquidityPairs (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral KLast (r:1 w:1)
	/// Proof Skipped: DexGeneral KLast (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral FeeMeta (r:1 w:0)
	/// Proof Skipped: DexGeneral FeeMeta (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn add_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2440`
		//  Estimated: `35743`
		// Minimum execution time: 149_124_000 picoseconds.
		Weight::from_parts(150_567_000, 35743)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: DexGeneral PairStatuses (r:1 w:1)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:5 w:5)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: DexGeneral LiquidityPairs (r:1 w:0)
	/// Proof Skipped: DexGeneral LiquidityPairs (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral KLast (r:1 w:1)
	/// Proof Skipped: DexGeneral KLast (max_values: None, max_size: None, mode: Measured)
	/// Storage: DexGeneral FeeMeta (r:1 w:0)
	/// Proof Skipped: DexGeneral FeeMeta (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(35), added: 2510, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_liquidity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2877`
		//  Estimated: `37491`
		// Minimum execution time: 136_581_000 picoseconds.
		Weight::from_parts(137_911_000, 37491)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Tokens Accounts (r:20 w:20)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: DexGeneral PairStatuses (r:9 w:0)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:9 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[2, 10]`.
	fn swap_exact_assets_for_assets(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1460 + a * (599 ±0)`
		//  Estimated: `7750 + a * (9109 ±0)`
		// Minimum execution time: 105_507_000 picoseconds.
		Weight::from_parts(70_542_326, 7750)
			// Standard Error: 497_333
			.saturating_add(Weight::from_parts(33_622_935, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 9109).saturating_mul(a.into()))
	}
	/// Storage: Tokens Accounts (r:20 w:20)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: DexGeneral PairStatuses (r:9 w:0)
	/// Proof Skipped: DexGeneral PairStatuses (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:9 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[2, 10]`.
	fn swap_assets_for_exact_assets(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1460 + a * (599 ±0)`
		//  Estimated: `7750 + a * (9109 ±0)`
		// Minimum execution time: 105_412_000 picoseconds.
		Weight::from_parts(29_757_872, 7750)
			// Standard Error: 49_212
			.saturating_add(Weight::from_parts(38_783_648, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 9109).saturating_mul(a.into()))
	}
	/// Storage: DexGeneral BootstrapRewards (r:1 w:1)
	/// Proof Skipped: DexGeneral BootstrapRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:20 w:20)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 10]`.
	fn bootstrap_charge_reward(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1989 + r * (119 ±0)`
		//  Estimated: `7051 + r * (5302 ±0)`
		// Minimum execution time: 74_374_000 picoseconds.
		Weight::from_parts(50_837_639, 7051)
			// Standard Error: 19_612
			.saturating_add(Weight::from_parts(26_312_767, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 5302).saturating_mul(r.into()))
	}
	/// Storage: DexGeneral BootstrapRewards (r:1 w:1)
	/// Proof Skipped: DexGeneral BootstrapRewards (max_values: None, max_size: None, mode: Measured)
	fn bootstrap_withdraw_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1154`
		//  Estimated: `3629`
		// Minimum execution time: 33_451_000 picoseconds.
		Weight::from_parts(34_528_000, 3629)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}