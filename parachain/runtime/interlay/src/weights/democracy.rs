
//! Autogenerated weights for democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-14, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `enterprise`, CPU: `Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("interlay-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// democracy
// --extrinsic
// *
// --chain
// interlay-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// parachain/runtime/interlay/src/weights
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for democracy using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> democracy::WeightInfo for WeightInfo<T> {
	/// Storage: Democracy PublicPropCount (r:1 w:1)
	/// Proof Skipped: Democracy PublicPropCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy PublicProps (r:1 w:1)
	/// Proof Skipped: Democracy PublicProps (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:0)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:1 w:0)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Reserved (r:1 w:1)
	/// Proof Skipped: Escrow Reserved (max_values: None, max_size: None, mode: Measured)
	/// Storage: Democracy DepositOf (r:0 w:1)
	/// Proof Skipped: Democracy DepositOf (max_values: None, max_size: None, mode: Measured)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7336`
		//  Estimated: `52431`
		// Minimum execution time: 65_435_000 picoseconds.
		Weight::from_parts(71_693_000, 52431)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Democracy DepositOf (r:1 w:1)
	/// Proof Skipped: Democracy DepositOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:0)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:1 w:0)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Reserved (r:1 w:1)
	/// Proof Skipped: Escrow Reserved (max_values: None, max_size: None, mode: Measured)
	fn second() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6000`
		//  Estimated: `33900`
		// Minimum execution time: 52_051_000 picoseconds.
		Weight::from_parts(53_605_000, 33900)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:0)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:1 w:0)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Reserved (r:1 w:0)
	/// Proof Skipped: Escrow Reserved (max_values: None, max_size: None, mode: Measured)
	/// Storage: Democracy VotingOf (r:1 w:1)
	/// Proof Skipped: Democracy VotingOf (max_values: None, max_size: None, mode: Measured)
	fn vote_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4388`
		//  Estimated: `34315`
		// Minimum execution time: 51_898_000 picoseconds.
		Weight::from_parts(53_585_000, 34315)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:0)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:1 w:0)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Reserved (r:1 w:0)
	/// Proof Skipped: Escrow Reserved (max_values: None, max_size: None, mode: Measured)
	/// Storage: Democracy VotingOf (r:1 w:1)
	/// Proof Skipped: Democracy VotingOf (max_values: None, max_size: None, mode: Measured)
	fn vote_existing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4409`
		//  Estimated: `34420`
		// Minimum execution time: 51_366_000 picoseconds.
		Weight::from_parts(52_339_000, 34420)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Democracy PublicProps (r:1 w:1)
	/// Proof Skipped: Democracy PublicProps (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy DepositOf (r:1 w:1)
	/// Proof Skipped: Democracy DepositOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Reserved (r:1 w:1)
	/// Proof Skipped: Escrow Reserved (max_values: None, max_size: None, mode: Measured)
	/// Storage: Democracy ReferendumCount (r:1 w:1)
	/// Proof Skipped: Democracy ReferendumCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy ReferendumInfoOf (r:0 w:1)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	fn fast_track() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1624`
		//  Estimated: `14060`
		// Minimum execution time: 53_929_000 picoseconds.
		Weight::from_parts(54_899_000, 14060)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	fn fast_track_referendum() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1240`
		//  Estimated: `3715`
		// Minimum execution time: 33_477_000 picoseconds.
		Weight::from_parts(33_802_000, 3715)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Democracy PublicProps (r:1 w:1)
	/// Proof Skipped: Democracy PublicProps (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy DepositOf (r:1 w:1)
	/// Proof Skipped: Democracy DepositOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Reserved (r:1 w:1)
	/// Proof Skipped: Escrow Reserved (max_values: None, max_size: None, mode: Measured)
	fn cancel_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7118`
		//  Estimated: `26799`
		// Minimum execution time: 60_198_000 picoseconds.
		Weight::from_parts(62_746_000, 26799)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	fn cancel_referendum() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1240`
		//  Estimated: `3715`
		// Minimum execution time: 29_778_000 picoseconds.
		Weight::from_parts(30_425_000, 3715)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Democracy LowestUnbaked (r:1 w:0)
	/// Proof Skipped: Democracy LowestUnbaked (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy ReferendumCount (r:1 w:1)
	/// Proof Skipped: Democracy ReferendumCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Democracy NextLaunchTimestamp (r:1 w:1)
	/// Proof Skipped: Democracy NextLaunchTimestamp (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy PublicProps (r:1 w:1)
	/// Proof Skipped: Democracy PublicProps (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy DepositOf (r:1 w:1)
	/// Proof Skipped: Democracy DepositOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Reserved (r:1 w:1)
	/// Proof Skipped: Escrow Reserved (max_values: None, max_size: None, mode: Measured)
	/// Storage: Democracy ReferendumInfoOf (r:99 w:100)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:0)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:0)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 99]`.
	fn on_initialize_public(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1442 + r * (117 ±0)`
		//  Estimated: `23383 + r * (3537 ±0)`
		// Minimum execution time: 56_094_000 picoseconds.
		Weight::from_parts(63_041_248, 23383)
			// Standard Error: 14_881
			.saturating_add(Weight::from_parts(10_884_010, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 3537).saturating_mul(r.into()))
	}
	/// Storage: Democracy LowestUnbaked (r:1 w:0)
	/// Proof Skipped: Democracy LowestUnbaked (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy ReferendumCount (r:1 w:0)
	/// Proof Skipped: Democracy ReferendumCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Democracy NextLaunchTimestamp (r:1 w:1)
	/// Proof Skipped: Democracy NextLaunchTimestamp (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy PublicProps (r:1 w:0)
	/// Proof Skipped: Democracy PublicProps (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy ReferendumInfoOf (r:99 w:0)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 99]`.
	fn on_initialize_base(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `644 + r * (117 ±0)`
		//  Estimated: `5704 + r * (3065 ±0)`
		// Minimum execution time: 13_987_000 picoseconds.
		Weight::from_parts(19_108_878, 5704)
			// Standard Error: 5_922
			.saturating_add(Weight::from_parts(3_204_932, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 3065).saturating_mul(r.into()))
	}
	/// Storage: Democracy LowestUnbaked (r:1 w:0)
	/// Proof Skipped: Democracy LowestUnbaked (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy ReferendumCount (r:1 w:0)
	/// Proof Skipped: Democracy ReferendumCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Democracy NextLaunchTimestamp (r:1 w:1)
	/// Proof Skipped: Democracy NextLaunchTimestamp (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy PublicProps (r:1 w:0)
	/// Proof Skipped: Democracy PublicProps (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Democracy ReferendumInfoOf (r:99 w:0)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 99]`.
	fn on_initialize_base_with_launch_period(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `644 + r * (117 ±0)`
		//  Estimated: `5704 + r * (3065 ±0)`
		// Minimum execution time: 13_883_000 picoseconds.
		Weight::from_parts(19_796_514, 5704)
			// Standard Error: 7_180
			.saturating_add(Weight::from_parts(3_197_214, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 3065).saturating_mul(r.into()))
	}
	/// Storage: Democracy PublicProps (r:0 w:1)
	/// Proof Skipped: Democracy PublicProps (max_values: Some(1), max_size: None, mode: Measured)
	fn clear_public_proposals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `711`
		// Minimum execution time: 9_053_000 picoseconds.
		Weight::from_parts(9_495_000, 711)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Democracy ReferendumInfoOf (r:1 w:1)
	/// Proof Skipped: Democracy ReferendumInfoOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: Democracy VotingOf (r:1 w:1)
	/// Proof Skipped: Democracy VotingOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[1, 100]`.
	fn remove_vote(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1371 + r * (25 ±0)`
		//  Estimated: `7614 + r * (52 ±0)`
		// Minimum execution time: 24_586_000 picoseconds.
		Weight::from_parts(28_701_558, 7614)
			// Standard Error: 3_848
			.saturating_add(Weight::from_parts(72_670, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 52).saturating_mul(r.into()))
	}
}