
//! Autogenerated weights for escrow
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-13, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sander-dell`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("interlay-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// interlay-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// parachain/runtime/interlay/src/weights/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for escrow using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> escrow::WeightInfo for WeightInfo<T> {
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:54 w:1)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:52)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn create_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2010`
		//  Estimated: `184991`
		// Minimum execution time: 262_226_000 picoseconds.
		Weight::from_parts(266_409_000, 184991)
			.saturating_add(T::DbWeight::get().reads(66_u64))
			.saturating_add(T::DbWeight::get().writes(62_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:1 w:1)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:1)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn increase_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3000`
		//  Estimated: `62103`
		// Minimum execution time: 120_614_000 picoseconds.
		Weight::from_parts(123_737_000, 62103)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:193 w:2)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:191)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn increase_unlock_height() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2930`
		//  Estimated: `536533`
		// Minimum execution time: 645_775_000 picoseconds.
		Weight::from_parts(673_278_000, 536533)
			.saturating_add(T::DbWeight::get().reads(204_u64))
			.saturating_add(T::DbWeight::get().writes(201_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow SlopeChanges (r:193 w:0)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:193)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Escrow UserPointHistory (r:0 w:2)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3263`
		//  Estimated: `531323`
		// Minimum execution time: 647_541_000 picoseconds.
		Weight::from_parts(669_167_000, 531323)
			.saturating_add(T::DbWeight::get().reads(203_u64))
			.saturating_add(T::DbWeight::get().writes(203_u64))
	}
}