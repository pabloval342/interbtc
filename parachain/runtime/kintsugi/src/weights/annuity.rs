
//! Autogenerated weights for annuity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-14, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sander-dell`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// /tmp/weights/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for annuity using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> annuity::WeightInfo for WeightInfo<T> {
	/// Storage: EscrowRewards Stake (r:1 w:0)
	/// Proof: EscrowRewards Stake (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: EscrowRewards RewardPerToken (r:1 w:0)
	/// Proof: EscrowRewards RewardPerToken (max_values: None, max_size: Some(59), added: 2534, mode: MaxEncodedLen)
	/// Storage: EscrowRewards RewardTally (r:1 w:1)
	/// Proof: EscrowRewards RewardTally (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	/// Storage: EscrowRewards TotalRewards (r:1 w:1)
	/// Proof: EscrowRewards TotalRewards (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:0)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	fn withdraw_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `606`
		//  Estimated: `15337`
		// Minimum execution time: 57_019_000 picoseconds.
		Weight::from_parts(61_544_000, 15337)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tokens Accounts (r:1 w:0)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: EscrowAnnuity RewardPerBlock (r:0 w:1)
	/// Proof: EscrowAnnuity RewardPerBlock (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317`
		//  Estimated: `2590`
		// Minimum execution time: 17_107_000 picoseconds.
		Weight::from_parts(18_369_000, 2590)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: EscrowAnnuity RewardPerWrapped (r:0 w:1)
	/// Proof: EscrowAnnuity RewardPerWrapped (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_reward_per_wrapped() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_505_000 picoseconds.
		Weight::from_parts(4_615_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}