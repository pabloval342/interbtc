
//! Autogenerated weights for security
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-14, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sander-dell`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// /tmp/weights/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for security using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> security::WeightInfo for WeightInfo<T> {
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof: Security ParachainStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: Security ActiveBlockCount (r:1 w:1)
	/// Proof: Security ActiveBlockCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `937`
		//  Estimated: `995`
		// Minimum execution time: 18_864_000 picoseconds.
		Weight::from_parts(19_192_000, 995)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Security ParachainStatus (r:0 w:1)
	/// Proof: Security ParachainStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn set_parachain_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `0`
		// Minimum execution time: 7_159_000 picoseconds.
		Weight::from_parts(7_445_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Security Errors (r:1 w:1)
	/// Proof: Security Errors (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn insert_parachain_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `837`
		//  Estimated: `497`
		// Minimum execution time: 12_076_000 picoseconds.
		Weight::from_parts(12_283_000, 497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Security Errors (r:1 w:1)
	/// Proof: Security Errors (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn remove_parachain_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `837`
		//  Estimated: `497`
		// Minimum execution time: 11_997_000 picoseconds.
		Weight::from_parts(12_284_000, 497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}