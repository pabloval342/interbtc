
//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-05, STEPS: `50`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `dev-benchmark`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 10
// --output
// ../tmp-weight/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {

	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1	(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 39_641_000 picoseconds.
		Weight::from_parts(46_443_344, 0)
			// Standard Error: 68
			.saturating_add(Weight::from_parts(884, 0).saturating_mul(z.into()))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `679 + s * (3 ±0)`
		//  Estimated: `10391`
		// Minimum execution time: 100_464_000 picoseconds.
		Weight::from_parts(83_410_474, 10391)
			// Standard Error: 14_982
			.saturating_add(Weight::from_parts(499_673, 0).saturating_mul(s.into()))
			// Standard Error: 146
			.saturating_add(Weight::from_parts(2_211, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `6811`
		// Minimum execution time: 67_939_000 picoseconds.
		Weight::from_parts(57_002_710, 6811)
			// Standard Error: 10_860
			.saturating_add(Weight::from_parts(329_023, 0).saturating_mul(s.into()))
			// Standard Error: 106
			.saturating_add(Weight::from_parts(1_774, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `820 + s * (35 ±0)`
		//  Estimated: `10391`
		// Minimum execution time: 101_575_000 picoseconds.
		Weight::from_parts(81_885_681, 10391)
			// Standard Error: 18_975
			.saturating_add(Weight::from_parts(601_187, 0).saturating_mul(s.into()))
			// Standard Error: 185
			.saturating_add(Weight::from_parts(3_377, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `681 + s * (3 ±0)`
		//  Estimated: `10391`
		// Minimum execution time: 76_682_000 picoseconds.
		Weight::from_parts(84_569_982, 10391)
			// Standard Error: 14_936
			.saturating_add(Weight::from_parts(424_166, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `6811`
		// Minimum execution time: 43_869_000 picoseconds.
		Weight::from_parts(47_979_585, 6811)
			// Standard Error: 10_160
			.saturating_add(Weight::from_parts(366_385, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `887 + s * (3 ±0)`
		//  Estimated: `10391`
		// Minimum execution time: 70_160_000 picoseconds.
		Weight::from_parts(78_936_731, 10391)
			// Standard Error: 14_286
			.saturating_add(Weight::from_parts(430_817, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}