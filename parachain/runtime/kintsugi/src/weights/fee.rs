
//! Autogenerated weights for fee
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-13, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sander-dell`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// parachain/runtime/kintsugi/src/weights/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for fee using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> fee::WeightInfo for WeightInfo<T> {
	/// Storage: VaultCapacity Stake (r:1 w:0)
	/// Proof Skipped: VaultCapacity Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultCapacity RewardPerToken (r:2 w:0)
	/// Proof Skipped: VaultCapacity RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultCapacity RewardTally (r:2 w:2)
	/// Proof Skipped: VaultCapacity RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultCapacity TotalRewards (r:2 w:2)
	/// Proof Skipped: VaultCapacity TotalRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards TotalStake (r:1 w:0)
	/// Proof Skipped: VaultRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards RewardCurrencies (r:1 w:1)
	/// Proof Skipped: VaultRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards RewardPerToken (r:2 w:2)
	/// Proof Skipped: VaultRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards TotalRewards (r:2 w:2)
	/// Proof Skipped: VaultRewards TotalRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards Stake (r:1 w:0)
	/// Proof Skipped: VaultRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards RewardTally (r:2 w:2)
	/// Proof Skipped: VaultRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: Fee Commission (r:1 w:0)
	/// Proof Skipped: Fee Commission (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking RewardPerToken (r:2 w:2)
	/// Proof Skipped: VaultStaking RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalRewards (r:2 w:2)
	/// Proof Skipped: VaultStaking TotalRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking Stake (r:1 w:1)
	/// Proof Skipped: VaultStaking Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking SlashPerToken (r:1 w:0)
	/// Proof Skipped: VaultStaking SlashPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking SlashTally (r:1 w:1)
	/// Proof Skipped: VaultStaking SlashTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalStake (r:1 w:1)
	/// Proof Skipped: VaultStaking TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking RewardTally (r:2 w:2)
	/// Proof Skipped: VaultStaking RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:4 w:4)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3804`
		//  Estimated: `163421`
		// Minimum execution time: 317_966_000 picoseconds.
		Weight::from_parts(329_944_000, 163421)
			.saturating_add(T::DbWeight::get().reads(35_u64))
			.saturating_add(T::DbWeight::get().writes(25_u64))
	}
	/// Storage: Fee IssueFee (r:0 w:1)
	/// Proof Skipped: Fee IssueFee (max_values: Some(1), max_size: None, mode: Measured)
	fn set_issue_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `711`
		// Minimum execution time: 7_063_000 picoseconds.
		Weight::from_parts(7_571_000, 711)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Fee IssueGriefingCollateral (r:0 w:1)
	/// Proof Skipped: Fee IssueGriefingCollateral (max_values: Some(1), max_size: None, mode: Measured)
	fn set_issue_griefing_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `711`
		// Minimum execution time: 7_350_000 picoseconds.
		Weight::from_parts(7_503_000, 711)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Fee RedeemFee (r:0 w:1)
	/// Proof Skipped: Fee RedeemFee (max_values: Some(1), max_size: None, mode: Measured)
	fn set_redeem_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `711`
		// Minimum execution time: 7_144_000 picoseconds.
		Weight::from_parts(7_608_000, 711)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Fee PremiumRedeemFee (r:0 w:1)
	/// Proof Skipped: Fee PremiumRedeemFee (max_values: Some(1), max_size: None, mode: Measured)
	fn set_premium_redeem_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `711`
		// Minimum execution time: 7_382_000 picoseconds.
		Weight::from_parts(7_563_000, 711)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Fee PunishmentFee (r:0 w:1)
	/// Proof Skipped: Fee PunishmentFee (max_values: Some(1), max_size: None, mode: Measured)
	fn set_punishment_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `711`
		// Minimum execution time: 7_276_000 picoseconds.
		Weight::from_parts(7_529_000, 711)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Fee ReplaceGriefingCollateral (r:0 w:1)
	/// Proof Skipped: Fee ReplaceGriefingCollateral (max_values: Some(1), max_size: None, mode: Measured)
	fn set_replace_griefing_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `711`
		// Minimum execution time: 7_369_000 picoseconds.
		Weight::from_parts(7_570_000, 711)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Fee Commission (r:0 w:1)
	/// Proof Skipped: Fee Commission (max_values: None, max_size: None, mode: Measured)
	fn set_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `711`
		//  Estimated: `711`
		// Minimum execution time: 8_644_000 picoseconds.
		Weight::from_parts(9_384_000, 711)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}