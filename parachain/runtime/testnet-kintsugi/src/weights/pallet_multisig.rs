
//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-01, STEPS: `10`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `dev-benchmark`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 10
// --repeat
// 5
// --output
// ../tmp-weight/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {

	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1	(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 41_038_000 picoseconds.
		Weight::from_parts(49_493_859, 0)
			// Standard Error: 274
			.saturating_add(Weight::from_parts(1_804, 0).saturating_mul(z.into()))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `635 + s * (3 ±0)`
		//  Estimated: `10391`
		// Minimum execution time: 106_059_000 picoseconds.
		Weight::from_parts(91_412_382, 10391)
			// Standard Error: 62_164
			.saturating_add(Weight::from_parts(515_995, 0).saturating_mul(s.into()))
			// Standard Error: 613
			.saturating_add(Weight::from_parts(2_845, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `6811`
		// Minimum execution time: 73_366_000 picoseconds.
		Weight::from_parts(61_629_009, 6811)
			// Standard Error: 45_506
			.saturating_add(Weight::from_parts(349_487, 0).saturating_mul(s.into()))
			// Standard Error: 443
			.saturating_add(Weight::from_parts(2_440, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776 + s * (35 ±0)`
		//  Estimated: `10391`
		// Minimum execution time: 104_933_000 picoseconds.
		Weight::from_parts(100_194_645, 10391)
			// Standard Error: 75_724
			.saturating_add(Weight::from_parts(643_606, 0).saturating_mul(s.into()))
			// Standard Error: 747
			.saturating_add(Weight::from_parts(2_190, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627 + s * (4 ±0)`
		//  Estimated: `10391`
		// Minimum execution time: 77_941_000 picoseconds.
		Weight::from_parts(91_398_547, 10391)
			// Standard Error: 89_374
			.saturating_add(Weight::from_parts(519_939, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `6811`
		// Minimum execution time: 46_122_000 picoseconds.
		Weight::from_parts(47_900_235, 6811)
			// Standard Error: 42_634
			.saturating_add(Weight::from_parts(522_730, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833 + s * (4 ±0)`
		//  Estimated: `10391`
		// Minimum execution time: 75_107_000 picoseconds.
		Weight::from_parts(79_447_897, 10391)
			// Standard Error: 42_875
			.saturating_add(Weight::from_parts(599_702, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}