
//! Autogenerated weights for farming
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-01, STEPS: `10`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `dev-benchmark`, CPU: `Intel(R) Xeon(R) CPU @ 2.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 10
// --repeat
// 5
// --output
// ../tmp-weight/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for farming using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> farming::WeightInfo for WeightInfo<T> {

	/// Storage: Farming RewardSchedules (r:5 w:0)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:2 w:0)
	/// Proof: FarmingRewards TotalStake (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 4]`.
	fn on_initialize	(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `189 + c * (41 ±0)`
		//  Estimated: `6732 + c * (3493 ±0)`
		// Minimum execution time: 37_731_000 picoseconds.
		Weight::from_parts(22_603_020, 6732)
			// Standard Error: 1_219_999
			.saturating_add(Weight::from_parts(17_678_854, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3493).saturating_mul(c.into()))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:1 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn update_reward_schedule	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `435`
		//  Estimated: `13302`
		// Minimum execution time: 115_361_000 picoseconds.
		Weight::from_parts(118_830_000, 13302)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:0 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn remove_reward_schedule	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `9763`
		// Minimum execution time: 94_314_000 picoseconds.
		Weight::from_parts(98_244_000, 9763)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:0)
	/// Proof: FarmingRewards RewardCurrencies (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof: FarmingRewards Stake (max_values: None, max_size: Some(75), added: 2550, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof: FarmingRewards TotalStake (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardTally (r:4 w:4)
	/// Proof: FarmingRewards RewardTally (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardPerToken (r:4 w:0)
	/// Proof: FarmingRewards RewardPerToken (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 4]`.
	fn deposit	(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `683 + c * (70 ±0)`
		//  Estimated: `16211 + c * (5122 ±0)`
		// Minimum execution time: 120_762_000 picoseconds.
		Weight::from_parts(110_092_826, 16211)
			// Standard Error: 2_684_014
			.saturating_add(Weight::from_parts(23_429_881, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 5122).saturating_mul(c.into()))
	}
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:0)
	/// Proof: FarmingRewards RewardCurrencies (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof: FarmingRewards Stake (max_values: None, max_size: Some(75), added: 2550, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof: FarmingRewards TotalStake (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardTally (r:4 w:4)
	/// Proof: FarmingRewards RewardTally (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardPerToken (r:4 w:0)
	/// Proof: FarmingRewards RewardPerToken (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 4]`.
	fn withdraw	(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `683 + c * (70 ±0)`
		//  Estimated: `16211 + c * (5122 ±0)`
		// Minimum execution time: 113_604_000 picoseconds.
		Weight::from_parts(106_539_861, 16211)
			// Standard Error: 2_371_161
			.saturating_add(Weight::from_parts(18_280_305, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 5122).saturating_mul(c.into()))
	}
	/// Storage: FarmingRewards Stake (r:1 w:0)
	/// Proof: FarmingRewards Stake (max_values: None, max_size: Some(75), added: 2550, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardPerToken (r:1 w:0)
	/// Proof: FarmingRewards RewardPerToken (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardTally (r:1 w:1)
	/// Proof: FarmingRewards RewardTally (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalRewards (r:1 w:1)
	/// Proof: FarmingRewards TotalRewards (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `956`
		//  Estimated: `23913`
		// Minimum execution time: 165_765_000 picoseconds.
		Weight::from_parts(189_299_000, 23913)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}