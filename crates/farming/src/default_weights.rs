//! Autogenerated weights for farming
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-07, STEPS: `100`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for farming.
pub trait WeightInfo {
	fn on_initialize(c: u32) -> Weight;
	fn update_reward_schedule() -> Weight;
	fn remove_reward_schedule() -> Weight;
	fn deposit() -> Weight;
	fn withdraw() -> Weight;
	fn claim() -> Weight;
}

/// Weights for farming using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize(c: u32) -> Weight {
		Weight::from_ref_time(100 as u64)
			.saturating_add(Weight::from_ref_time(100 as u64).saturating_mul(c as u64))
	}
	fn update_reward_schedule() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
	fn remove_reward_schedule() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
	fn deposit() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
	fn withdraw() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
	fn claim() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize(c: u32) -> Weight {
		Weight::from_ref_time(100 as u64)
			.saturating_add(Weight::from_ref_time(100 as u64).saturating_mul(c as u64))
	}
	fn update_reward_schedule() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
	fn remove_reward_schedule() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
	fn deposit() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
	fn withdraw() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
	fn claim() -> Weight {
		Weight::from_ref_time(100 as u64)
	}
}
