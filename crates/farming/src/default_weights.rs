
//! Autogenerated weights for farming
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-05, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `interlay-hetzner-01`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-testnet-latest"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --chain
// kintsugi-testnet-latest
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// farming
// --extrinsic
// *
// --steps
// 100
// --repeat
// 10
// --output
// ./crates/farming/src/default_weights.rs
// --template
// .deploy/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for farming.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn update_reward_schedule() -> Weight;
	fn remove_reward_schedule() -> Weight;
	fn deposit() -> Weight;
	fn withdraw() -> Weight;
	fn claim() -> Weight;
}

/// Weights for farming using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Farming RewardSchedules (r:5 w:0)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:2 w:0)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1337`
		//  Estimated: `19032`
		// Minimum execution time: 78_968_000 picoseconds.
		Weight::from_parts(79_629_000, 19032)
			.saturating_add(T::DbWeight::get().reads(7_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:1 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn update_reward_schedule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2038`
		//  Estimated: `12935`
		// Minimum execution time: 99_750_000 picoseconds.
		Weight::from_parts(112_936_000, 12935)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:0 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn remove_reward_schedule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2210`
		//  Estimated: `7783`
		// Minimum execution time: 80_231_000 picoseconds.
		Weight::from_parts(104_790_000, 7783)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:1)
	/// Proof Skipped: FarmingRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:2 w:2)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1622`
		//  Estimated: `28025`
		// Minimum execution time: 100_832_000 picoseconds.
		Weight::from_parts(105_191_000, 28025)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: FarmingRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:2 w:2)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2032`
		//  Estimated: `30075`
		// Minimum execution time: 102_615_000 picoseconds.
		Weight::from_parts(114_750_000, 30075)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: FarmingRewards Stake (r:1 w:0)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:1 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:1 w:1)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalRewards (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2813`
		//  Estimated: `31538`
		// Minimum execution time: 136_453_000 picoseconds.
		Weight::from_parts(148_016_000, 31538)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Farming RewardSchedules (r:5 w:0)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:2 w:0)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1337`
		//  Estimated: `19032`
		// Minimum execution time: 78_968_000 picoseconds.
		Weight::from_parts(79_629_000, 19032)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:1 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn update_reward_schedule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2038`
		//  Estimated: `12935`
		// Minimum execution time: 99_750_000 picoseconds.
		Weight::from_parts(112_936_000, 12935)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:0 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn remove_reward_schedule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2210`
		//  Estimated: `7783`
		// Minimum execution time: 80_231_000 picoseconds.
		Weight::from_parts(104_790_000, 7783)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:1)
	/// Proof Skipped: FarmingRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:2 w:2)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1622`
		//  Estimated: `28025`
		// Minimum execution time: 100_832_000 picoseconds.
		Weight::from_parts(105_191_000, 28025)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: FarmingRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:2 w:2)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2032`
		//  Estimated: `30075`
		// Minimum execution time: 102_615_000 picoseconds.
		Weight::from_parts(114_750_000, 30075)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: FarmingRewards Stake (r:1 w:0)
	/// Proof Skipped: FarmingRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardPerToken (r:1 w:0)
	/// Proof Skipped: FarmingRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards RewardTally (r:1 w:1)
	/// Proof Skipped: FarmingRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: FarmingRewards TotalRewards (r:1 w:1)
	/// Proof Skipped: FarmingRewards TotalRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2813`
		//  Estimated: `31538`
		// Minimum execution time: 136_453_000 picoseconds.
		Weight::from_parts(148_016_000, 31538)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
}
