//! Autogenerated weights for escrow
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-16, STEPS: `100`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/interbtc-standalone
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// escrow
// --extrinsic
// *
// --steps
// 100
// --repeat
// 10
// --output
// crates/escrow/src/default_weights.rs
// --template
// .deploy/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for escrow.
pub trait WeightInfo {
	fn create_lock() -> Weight;
	fn increase_amount() -> Weight;
	fn increase_unlock_height() -> Weight;
	fn withdraw() -> Weight;
}

/// Weights for escrow using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Escrow Locked (r:1 w:1)
	// Storage: Tokens Locks (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Escrow SlopeChanges (r:2 w:1)
	// Storage: Escrow Epoch (r:1 w:1)
	// Storage: Escrow PointHistory (r:1 w:1)
	// Storage: Escrow UserPointEpoch (r:1 w:1)
	// Storage: Escrow UserPointHistory (r:0 w:1)
	fn create_lock() -> Weight {
		(81_898_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Escrow Locked (r:1 w:1)
	// Storage: Tokens Locks (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Escrow SlopeChanges (r:1 w:1)
	// Storage: Escrow Epoch (r:1 w:1)
	// Storage: Escrow PointHistory (r:1 w:1)
	// Storage: Escrow UserPointEpoch (r:1 w:1)
	// Storage: Escrow UserPointHistory (r:0 w:1)
	fn increase_amount() -> Weight {
		(68_339_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: Escrow Locked (r:1 w:1)
	// Storage: Escrow SlopeChanges (r:209 w:2)
	// Storage: Escrow Epoch (r:1 w:1)
	// Storage: Escrow PointHistory (r:1 w:208)
	// Storage: Escrow UserPointEpoch (r:1 w:1)
	// Storage: Escrow UserPointHistory (r:0 w:1)
	fn increase_unlock_height() -> Weight {
		(1_090_332_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(213 as Weight))
			.saturating_add(T::DbWeight::get().writes(214 as Weight))
	}
	// Storage: Escrow Locked (r:1 w:1)
	// Storage: Escrow SlopeChanges (r:209 w:0)
	// Storage: Escrow Epoch (r:1 w:1)
	// Storage: Escrow PointHistory (r:1 w:210)
	// Storage: Escrow UserPointEpoch (r:1 w:1)
	// Storage: Tokens Locks (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Escrow UserPointHistory (r:0 w:2)
	fn withdraw() -> Weight {
		(1_120_628_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(216 as Weight))
			.saturating_add(T::DbWeight::get().writes(218 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Escrow Locked (r:1 w:1)
	// Storage: Tokens Locks (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Escrow SlopeChanges (r:2 w:1)
	// Storage: Escrow Epoch (r:1 w:1)
	// Storage: Escrow PointHistory (r:1 w:1)
	// Storage: Escrow UserPointEpoch (r:1 w:1)
	// Storage: Escrow UserPointHistory (r:0 w:1)
	fn create_lock() -> Weight {
		(81_898_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	// Storage: Escrow Locked (r:1 w:1)
	// Storage: Tokens Locks (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Escrow SlopeChanges (r:1 w:1)
	// Storage: Escrow Epoch (r:1 w:1)
	// Storage: Escrow PointHistory (r:1 w:1)
	// Storage: Escrow UserPointEpoch (r:1 w:1)
	// Storage: Escrow UserPointHistory (r:0 w:1)
	fn increase_amount() -> Weight {
		(68_339_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: Escrow Locked (r:1 w:1)
	// Storage: Escrow SlopeChanges (r:209 w:2)
	// Storage: Escrow Epoch (r:1 w:1)
	// Storage: Escrow PointHistory (r:1 w:208)
	// Storage: Escrow UserPointEpoch (r:1 w:1)
	// Storage: Escrow UserPointHistory (r:0 w:1)
	fn increase_unlock_height() -> Weight {
		(1_090_332_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(213 as Weight))
			.saturating_add(RocksDbWeight::get().writes(214 as Weight))
	}
	// Storage: Escrow Locked (r:1 w:1)
	// Storage: Escrow SlopeChanges (r:209 w:0)
	// Storage: Escrow Epoch (r:1 w:1)
	// Storage: Escrow PointHistory (r:1 w:210)
	// Storage: Escrow UserPointEpoch (r:1 w:1)
	// Storage: Tokens Locks (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Escrow UserPointHistory (r:0 w:2)
	fn withdraw() -> Weight {
		(1_120_628_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(216 as Weight))
			.saturating_add(RocksDbWeight::get().writes(218 as Weight))
	}
}

