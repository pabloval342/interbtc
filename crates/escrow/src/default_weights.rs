
//! Autogenerated weights for escrow
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-27, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sander-dell`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// escrow
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// escrow_default_weights.rs
// --template
// .deploy/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for escrow.
pub trait WeightInfo {
	fn create_lock() -> Weight;
	fn increase_amount() -> Weight;
	fn increase_unlock_height() -> Weight;
	fn withdraw() -> Weight;
}

/// Weights for escrow using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:2 w:1)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:1)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:1)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardTally (r:2 w:2)
	/// Proof Skipped: EscrowRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: EscrowRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn create_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1855`
		//  Estimated: `68196`
		// Minimum execution time: 125_151_000 picoseconds.
		Weight::from_parts(140_309_000, 68196)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:1 w:1)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:1)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardTally (r:2 w:2)
	/// Proof Skipped: EscrowRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: EscrowRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn increase_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2497`
		//  Estimated: `71464`
		// Minimum execution time: 136_362_000 picoseconds.
		Weight::from_parts(146_407_000, 71464)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:97 w:2)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:95)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardTally (r:2 w:2)
	/// Proof Skipped: EscrowRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: EscrowRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn increase_unlock_height() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2497`
		//  Estimated: `309064`
		// Minimum execution time: 385_998_000 picoseconds.
		Weight::from_parts(408_057_000, 309064)
			.saturating_add(T::DbWeight::get().reads(112_u64))
			.saturating_add(T::DbWeight::get().writes(107_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardTally (r:2 w:2)
	/// Proof Skipped: EscrowRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: EscrowRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow SlopeChanges (r:97 w:0)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:97)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Escrow UserPointHistory (r:0 w:2)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2830`
		//  Estimated: `305386`
		// Minimum execution time: 378_264_000 picoseconds.
		Weight::from_parts(385_866_000, 305386)
			.saturating_add(T::DbWeight::get().reads(111_u64))
			.saturating_add(T::DbWeight::get().writes(109_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:2 w:1)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:1)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:1)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardTally (r:2 w:2)
	/// Proof Skipped: EscrowRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: EscrowRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn create_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1855`
		//  Estimated: `68196`
		// Minimum execution time: 125_151_000 picoseconds.
		Weight::from_parts(140_309_000, 68196)
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:1 w:1)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:1)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardTally (r:2 w:2)
	/// Proof Skipped: EscrowRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: EscrowRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn increase_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2497`
		//  Estimated: `71464`
		// Minimum execution time: 136_362_000 picoseconds.
		Weight::from_parts(146_407_000, 71464)
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: Escrow Blocks (r:1 w:0)
	/// Proof Skipped: Escrow Blocks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Limits (r:1 w:0)
	/// Proof Skipped: Escrow Limits (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Escrow SlopeChanges (r:97 w:2)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:95)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardTally (r:2 w:2)
	/// Proof Skipped: EscrowRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: EscrowRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointHistory (r:0 w:1)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn increase_unlock_height() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2497`
		//  Estimated: `309064`
		// Minimum execution time: 385_998_000 picoseconds.
		Weight::from_parts(408_057_000, 309064)
			.saturating_add(RocksDbWeight::get().reads(112_u64))
			.saturating_add(RocksDbWeight::get().writes(107_u64))
	}
	/// Storage: Escrow Locked (r:1 w:1)
	/// Proof Skipped: Escrow Locked (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards Stake (r:1 w:1)
	/// Proof Skipped: EscrowRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards TotalStake (r:1 w:1)
	/// Proof Skipped: EscrowRewards TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardCurrencies (r:1 w:0)
	/// Proof Skipped: EscrowRewards RewardCurrencies (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardTally (r:2 w:2)
	/// Proof Skipped: EscrowRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: EscrowRewards RewardPerToken (r:2 w:0)
	/// Proof Skipped: EscrowRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow SlopeChanges (r:97 w:0)
	/// Proof Skipped: Escrow SlopeChanges (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow Epoch (r:1 w:1)
	/// Proof Skipped: Escrow Epoch (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Escrow PointHistory (r:1 w:97)
	/// Proof Skipped: Escrow PointHistory (max_values: None, max_size: None, mode: Measured)
	/// Storage: Escrow UserPointEpoch (r:1 w:1)
	/// Proof Skipped: Escrow UserPointEpoch (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Locks (r:1 w:1)
	/// Proof: Tokens Locks (max_values: None, max_size: Some(1268), added: 3743, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Escrow UserPointHistory (r:0 w:2)
	/// Proof Skipped: Escrow UserPointHistory (max_values: None, max_size: None, mode: Measured)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2830`
		//  Estimated: `305386`
		// Minimum execution time: 378_264_000 picoseconds.
		Weight::from_parts(385_866_000, 305386)
			.saturating_add(RocksDbWeight::get().reads(111_u64))
			.saturating_add(RocksDbWeight::get().writes(109_u64))
	}
}
