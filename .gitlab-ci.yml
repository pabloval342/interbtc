# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# Install a C compiler, cmake and git into the container.
before_script:
    - apt-get -y update
    - apt-get install -y build-essential cmake pkg-config libssl-dev clang libclang-dev llvm
    - rustup toolchain install nightly-2020-03-01 # rustc version 1.43.0-nightly
    - rustup default nightly-2020-03-01
    - rustup component add rustfmt
    - rustup toolchain install nightly
    - rustup target add wasm32-unknown-unknown --toolchain nightly-2020-03-01
    - rustc --version && rustfmt --version && cargo --version # Print version info for debugging

# Declare stages
stages:
    - build # for crates and pallets
    - test # for tests in dev
    - deploy # for deployment in master

# # master branch
# btc-parachain-test:
#   stage: deploy
#   image: rustlang/rust:nightly
#   script:
#     - cd parachain
#     - ./scripts/init.sh
#     - cargo test --all --verbose
#   only:
#     - master

# btc-parachain-build:
#   stage: test
#   image: rustlang/rust:nightly
#   script:
#     - cd parachain
#     - ./scripts/init.sh
#     - cargo build --release --verbose
#   only:
#     - dev

# # merge requests
# btc-parachain-build:
#   stage: test
#   image: rustlang/rust:nightly
#   script:
#     - cd parachain
#     - ./scripts/init.sh
#     - cargo build --release --verbose
#   only:
#     - merge_requests

# btc-parachain-test:
#   stage: test
#   image: rustlang/rust:nightly
#   script:
#     - cd parachain
#     - ./scripts/init.sh
#     - cargo test --all --verbose
#   only:
#     - merge_requests

# pallets and crates
test-pallets-and-crates:
    stage: test
    script:
        - cargo build --release --verbose
        - cargo fmt -- --check
        - cargo test --all --release
    cache:
        key: build-cache
        paths:
            - target
    only:
        - merge_requests
